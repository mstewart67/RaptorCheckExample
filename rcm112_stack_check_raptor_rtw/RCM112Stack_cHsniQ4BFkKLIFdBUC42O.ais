# File: RCM112Stack_cHsniQ4BFkKLIFdBUC42O.ais
# Author: NE0163
# Generated Data: 27-Mar-2024 13:31:48
# Raptor-Dev: DEVELOPMENT
# Raptor Check: 
# MATLAB: 9.14.0.2489007 (R2023a) Update 6
# Target: RCM-58NN-112-2202
# Build UID: cHsniQ4BFkKLIFdBUC42O

#
# Description: Raptor Check annotation file, dynamically generated by Raptor-Dev based on model properties
# known at build time. This ais file is pre-included, therefore will execute before other global settings are
# initialized. This means that this file can define ais variables that can be used in other ais files.
#
# All assumptions made for this analysis are documented with the 'ASSUME' tag.
#
# Any annotations using evalC(macro("MACRO_NAME)) depend on -g3 and the macro to be present in a header
# file included in the build of the application. Object files in linked BSW archives dont't have -g3 present,
# therefore if a macro is defined in the source file, it wont' be accessible. If a macro is defined by another macro,
# there can be an issue where only the macro with a value defined is present in the DWARF symbols. Before using a macro
# for an annotation check the debug symbols of the application ELF.
#
# Copyright (c) 2024 New Eagle LLC
#

########################## Raptor Dynamically Generated Annotations ##########################
# This area is reserved for any annotations that will need to generated by Raptor. This can
# include defining computed calls, defining annotation variables to be used throughout the
# analysis, etc. Use the "define" annotation to create variables local to this ais file, that
# can be used in other annotations. If an annotation requires a local ais variable to exist
# make sure that the define is always present, or a default value is provided.

try instruction 'Bios_Can_RxIndicatorMainfunction' -> computed(1) { calls: 'CAN_ReceiveDispatch_531__0004', 'CAN_ReceiveDispatch_532__0004', 'CAN_ReceiveDispatch_533__0004', 'CAN_ReceiveDispatch_534__0004', 'CAN_ReceiveDispatch_535__0004'; }
try instruction 'XcpApp_GetSeed' -> computed(1) { calls: 'XcpRaptorSecurity'; }




compiler: "ppc-gcc";
clock: 200 MHz;
try instruction "Xcp_DaqProcessor" -> computed(2) { calls: "XcpCan_TxNext"; }
try instruction "Xcp_DaqProcessor" -> computed(1) { calls: "XcpCan_GetTxBuf"; }
try instruction "Xcp_StimProcessor" -> computed(1) { calls: "XcpCan_PeekRxBuf"; }
try instruction "Xcp_StimProcessor" -> computed(2) { calls: "XcpCan_RxNext"; }
try instruction "Xcp_StimProcessor" -> computed(3) { calls: "XcpCan_GetRxBuf"; }
try instruction "Xcp_StimProcessor" -> computed(4) { calls: "XcpCan_GetRxBuf"; }
try instruction "Xcp_StimProcessor" -> computed(5) { calls: "XcpCan_RxNext"; }
try instruction "Xcp_CmdProcessor" -> computed(1) { calls: "XcpCan_GetRxBuf"; }
try instruction "Xcp_CmdProcessor" -> computed(2) { calls: "XcpCan_GetTxBuf"; }
try instruction "Xcp_CmdProcessor" -> computed(4) { calls: "XcpCan_RxNext"; }
try instruction "Xcp_CmdProcessor" -> computed(5) { calls: "XcpCan_TxNext"; }
try instruction "Xcp_CmdProcessor" -> computed(6) { calls: "XcpCan_GetTxBuf"; }
try instruction "Xcp_CmdProcessor" -> computed(7) { calls: "XcpCan_TxNext"; }
try routine "XcpCan_DoTransmit" { incarnation limit: 1; }
try instruction "FSL_MainFunction" -> computed(1) { calls: "Bios_Swt_ServeMC0"; }
try instruction "FSL_FlashRead" -> computed(1) { calls: "Bios_Swt_ServeMC0", "Bios_Fee_CallbackFunc"; }
try instruction "FSL_EraseEEBlock" -> computed(1) { calls: "Bios_Swt_ServeMC0", "Bios_Fee_CallbackFunc"; }
try instruction "FSL_SyncProgram" -> computed(1) { calls: "Bios_Swt_ServeMC0", "Bios_Fee_CallbackFunc"; }
try instruction "FSL_SearchRecordFromTop" -> computed(1) { calls: "Bios_Swt_ServeMC0", "Bios_Fee_CallbackFunc"; }
try instruction "FSL_SearchRecordFromBottom" -> computed(1) { calls: "Bios_Swt_ServeMC0", "Bios_Fee_CallbackFunc"; }
try instruction "FSL_EraseEEBlock" -> computed(1) { calls: "Bios_Swt_ServeMC0", "Bios_Fee_CallbackFunc"; }
try instruction "FSL_SyncProgram" -> computed(1) { calls: "Bios_Swt_ServeMC0", "Bios_Fee_CallbackFunc"; }
try instruction "FSL_SearchRecordFromTop" -> computed(1) { calls: "Bios_Swt_ServeMC0", "Bios_Fee_CallbackFunc"; }
try instruction "FSL_SearchRecordFromBottom" -> computed(1) { calls: "Bios_Swt_ServeMC0", "Bios_Fee_CallbackFunc"; }
try routine "Bios_Rtos_GetOffendingTaskID" { incarnation limit: 1; }
try routine "Os_Cbk_InShutdown" { not analyzed; obeys calling conventions: true; stack usage: 0 bytes; }
try routine "Os_ShutdownOS" { not analyzed; obeys calling conventions: true; stack usage: 0 bytes; }
try routine "Os_ErrorLog" { not analyzed; obeys calling conventions: true; stack usage: 0 bytes; }
try routine "exit" { not analyzed; obeys calling conventions: true; stack usage: 0 bytes; }
try routine "abort" { not analyzed; obeys calling conventions: true; stack usage: 0 bytes; }
try routine "ShutdownAllCores" { not analyzed; obeys calling conventions: true; stack usage: 0 bytes; }
try instruction "_fnet_mutex_lock" -> computed(1) { tail calls: "Bios_Eth_MutexLock"; }
try instruction "_fnet_mutex_unlock" -> computed(1) { tail calls: "Bios_Eth_MutexUnlock"; }
try instruction "fnet_timer_get_ms" -> computed(1) { tail calls: "Bios_Eth_TimerGetMs"; }
try instruction "fnet_service_poll" -> computed(1) { calls: "_fnet_link_poll"; }
try instruction "_fnet_link_poll" -> computed(1) { tail calls: "Bios_Eth_LinkCbk"; }
try area ("fnet_icmp4_prot_if"."prot_drain") { contains data: 0; }
try area ("fnet_icmp6_prot_if"."prot_drain") { contains data: 0; }
try area ("fnet_tcp_prot_if"."prot_drain")  { contains data: address("_fnet_tcp_drain"); }
try area ("fnet_udp_prot_if"."prot_drain") { contains data: 0; }
try area ("fnet_igmp_prot_if"."prot_drain") { contains data: 0; }
try area ("fnet_raw_prot_if"."prot_drain") { contains data: 0; }
try instruction "_fnet_ip4_netif_output" -> computed(1) { tail calls: "_fnet_eth_output_ip4"; }
try instruction "_fnet_eth_output" -> computed(1) { tail calls: "Bios_Eth_Output"; }
try instruction "_fnet_ip6_output" -> computed(1) { calls: "_fnet_eth_output_ip6"; }
try instruction "_fnet_ip6_output" -> computed(2) { calls: "_fnet_eth_output_ip6"; }
try instruction "fnet_isr_unlock" -> computed(1) { calls: "Bios_Eth_NetIfIsrHandlerBottom"; }
try instruction "_fnet_netif_drain" -> computed(1) { calls: "_fnet_eth_drain"; }
try instruction "_fnet_netif_get_hw_addr" -> computed(1) { tail calls: "Bios_Eth_NetIfGetHwAddr"; }
try instruction "_fnet_netif_is_connected" -> computed(1) { calls: "_fnet_eth_is_connected"; }
try instruction "_fnet_timer_poll" -> computed(1) { calls: "_fnet_arp_timer","_fnet_ip4_timer","_fnet_ip6_timer","_fnet_nd6_timer","_fnet_netif_pmtu_timer","_fnet_tcp_fasttimo","_fnet_tcp_slowtimo"; }
try instruction "_fnet_eth_phy_read" -> computed(1) { tail calls: "Bios_Eth_NetIfPhyRead"; }
try instruction "fnet_event_raise" -> computed(1) { calls: "Bios_Eth_NetIfIsrHandlerTop"; }
try instruction "fnet_event_raise" -> computed(2) { calls: "Bios_Eth_NetIfIsrHandlerBottom"; }
try instruction "_fnet_netif_is_connected" -> computed(2) { calls: "_fnet_eth_change_addr_notify"; }
try instruction "_fnet_netif_leave_ip6_multicast" -> computed(1) { tail calls: "_fnet_eth_multicast_leave_ip6"; }
try instruction "_fnet_eth_multicast_leave_ip6" -> computed(1) { calls: "Bios_Eth_MulticastLeave"; }
try instruction "Bios_Eth_EnetReclaimTxDescriptor" -> computed(1) { calls: "Bios_Eth_NetIfCallback"; }
try instruction "Bios_Eth_EnetIRQHandler" -> computed(1) { calls: "Bios_Eth_NetIfCallback"; }
try instruction "Bios_Eth_EnetIRQHandler" -> computed(2) { calls: "Bios_Eth_NetIfCallback"; }
try area ("fnet_icmp4_prot_if"."socket_api") { volatile: true; }
try instruction "fnet_socket" -> computed(1) { calls: "_fnet_raw_attach","_fnet_tcp_attach","_fnet_udp_detach"; }
try instruction "fnet_socket_setopt" -> computed(1) { calls: "_fnet_tcp_setsockopt", "_fnet_ip_setsockopt"; }
try instruction "fnet_socket_recvfrom" -> computed(1) { calls: "_fnet_udp_rcv","_fnet_tcp_rcv"; }
try instruction "fnet_socket_sendto" -> computed(1) { calls: "_fnet_tcp_snd", "_fnet_udp_snd"; }
try instruction "_fnet_prot_drain" -> computed(1) { calls: "_fnet_tcp_drain"; }
try instruction "_fnet_netif_set_hw_addr" -> computed(1) { tail calls: "Bios_Eth_NetIfSetHwAddr"; }
try instruction "fnet_socket_connect" -> computed(1) { calls: "_fnet_tcp_connect", "_fnet_udp_connect"; }
try instruction "fnet_socket_shutdown" -> computed(1) { calls: "_fnet_udp_shutdown", "_fnet_tcp_shutdown"; }
try instruction "fnet_socket_close" -> computed(1) { calls: "_fnet_tcp_close", "_fnet_udp_detach"; }
try instruction "_fnet_netif_leave_ip4_multicast" -> computed(1) { tail calls: "_fnet_eth_multicast_leave_ip4"; }
try instruction "_fnet_eth_multicast_leave_ip4" -> computed(1) { calls: "Bios_Eth_MulticastLeave"; }
try instruction "fnet_socket_accept" -> computed(1) { calls: "_fnet_tcp_accept"; }
try instruction "fnet_socket_listen" -> computed(1) { calls: "_fnet_tcp_listen"; }
try instruction "_fnet_netif_join_ip4_multicast" -> computed(1) { tail calls: "_fnet_eth_multicast_join_ip4"; }
try instruction "_fnet_eth_multicast_join_ip4" -> computed(1) { calls: "Bios_Eth_MulticastJoin"; }
try area "_Tls_setup__Randinit" contains data: 0;
try area "_Tls_setup__Randseed" contains data: 0;
try routine "feraiseexcept" { not analyzed; obeys calling conventions: true; stack usage: 0 bytes; }
try routine "_fnet_ip6_output" { incarnation limit: 2; }
try routine "fnet_isr_unlock" { incarnation limit: 2; }
try routine "_fnet_netbuf_new" { incarnation limit: 2; }
try routine "Bios_Eth_NetIfIsrHandlerBottom" { incarnation limit: 2; }
try instruction "Bios_PCA21125_CallbackHandler" -> computed(1) null safe;
try instruction "Bios_PCA21125_CallbackHandler" -> computed(2) null safe;
try instruction "Bios_PCA21125_CallbackHandler" -> computed(3) null safe;
try instruction "Bios_PCA21125_CallbackHandler" -> computed(4) null safe;
try instruction "Bios_PCA21125_CallbackHandler" -> computed(5) null safe;
try instruction "Xcp_ResetDaqList" -> computed(1) { calls: "XcpCan_ResetDaqList"; }
try loop "XcpCan_RxCallback.L2" bound: 0 begin;
try instruction "Xcp_CmdTransportLayer" -> computed(1) { calls: "XcpCan_CmdProc"; }
